{
  "title": "Backlogged",
  "objective": "La principal motivacion para este proyecto fue crear algo mas grande que mis proyectos previos, con algun tipo de sistema para logearse y para escribir y borrar a una base de datos. <br/> La API de RAWG fue ideal para este proyecto, proporcionando una amplia gama de datos para trabajor con el frontend. <br/> Firebase provee el resto de los servicios necesarios para cumplir con mis objectives, base de datos y autenticacion.",
  "features": "En este aplicacion web, los usarios pueden logearse usando la Autenticacion de Google, dandoles acceso a escribir y borrar a la base de datos de Firebase en forma de guardar o borrar videojuegos de su backlog con un boton el cual muestra consistenmente el icono de guardado a traves de toda la aplicacion. Dicho backlog es visible de forma privada en los perfiles de cada usario, aqui mismo se puede borrar todos sus videojuegos con un solo click, o borrar de forma permanente su cuenta de la base de datos. <br/> Informacion basica sobre cada videojuego se muestra en forma de cards en estilo 'Masonry', adaptando el numero de columnas dependiendo del ancho del navegador. Varios filtros, los cuales son proporcionados por la API, estan implementados, como es el caso de filtrar por generos, ano de lanzamiento, etc. En cada pagina de los videojuegos, las imagenes, siempre y cuando esten disponibles, se muestran en un slider con funcionalidad full screen. <br/> Se majenan los errores 404 para URLs incorrectas al igual que cuando no se encuentran resultados para las busquedas. Como en todos mis proyectos, el diseno es fully responsive y testeado en dispositivos hasta 375px de ancho.",
  "challenges": "Despues de configurar la logica basica para interactuar con Firebase, el primer desafio con el que me encontre fue con el diseno 'Masonry', pero con un poco de ayuda de ChatGPT, implemente este mismo creando de 1 a 3 arrays, dependiendo de la cantidad de columnas que se muestran, y guardando cada segundo o tercer elemento en diferentes arrays, despues a estos arrays los mapeo en formato Grid, con cada columna tienendo el primer, tercer, sexto, etc., Elemento debajo de cada uno. <br/> Otra dificultad la cual tuve fue gestionar globalmente el estado para cuando el usario esta logeado a lo largo de la aplicacion, el cual lo resolvi usando solamente Context API. <br/> Mantener el boton de guardado sincronizado a lo largo de toda la aplicacion fue un pequeno desafio el cual puede resolver rapidamente.",
  "stack": "Ademas de los sliders, para los cuales use Swiper.js, Material-UI (MUI) se uso para la gran mayoria de los componentes, edicion de los estilos fue realizado con TailwindCSS y CSS puro cuando fue necesario. React-Router-Dom se encargo de la navegacion, Axios para las llamadas a las API de forma modular para cada endpoint. Firebase se encarga de la autenticacion y de la base de datos. <br/> React fue el framework de frontend con TypeScript para tener 'type safety'."
}
