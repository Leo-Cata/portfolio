{
  "title": "Backlogged",
  "objective": "La principal motivación para este proyecto fue crear algo más grande que mis proyectos previos, con algún tipo de sistema para loguearse y para escribir y borrar a una base de datos. <br/> La API de RAWG fue ideal para este proyecto, proporcionando una amplia gama de datos para trabajar con el frontend. <br/> Firebase provee el resto de los servicios necesarios para cumplir con mis objetives, base de datos y autenticación.",
  "features": "En esta aplicación web, los usuarios pueden loguearse usando la Autenticación de Google, dándoles acceso a escribir y borrar a la base de datos de Firebase en forma de guardar o borrar videojuegos de su backlog con un botón, el cual muestra consistenmente el icono de guardado a través de toda la aplicación. Dicho backlog es visible de forma privada en los perfiles de cada usuario, aquí mismo se puede borrar todos sus videojuegos con un solo click, o borrar de forma permanente su cuenta de la base de datos. <br/> Información básica sobre cada videojuego se muestra en forma de cards en estilo 'Masonry', adaptando el número de columnas dependiendo del ancho del navegador. Varios filtros, los cuales son proporcionados por la API, están implementados, como es el caso de filtrar por géneros, año de lanzamiento, etc. En cada página de los videojuegos, las imágenes, siempre y cuando estén disponibles, se muestran en un slider con funcionalidad full screen. <br/> Se manejan los errores 404 para URLs incorrectas, al igual que cuando no se encuentran resultados para las búsquedas. Como en todos mis proyectos, el diseño es fully responsive y testeado en dispositivos hasta 375px de ancho.",
  "challenges": "Después de configurar la lógica básica para interactuar con Firebase, el primer desafío con el que me encontré fue con el diseño 'Masonry', pero con un poco de ayuda de ChatGPT, implemente este mismo creando de 1 a 3 arrays, dependiendo de la cantidad de columnas que se muestran, y guardando cada segundo o tercer elemento en diferentes arrays, después a estos arrays los mapeo en formato Grid, con cada columna teniendo el primer, tercer, sexto, etc. Elemento debajo de cada uno. <br/> Otra dificultad la cual tuve fue gestionar globalmente el estado para cuando el usuario está logueado a lo largo de la aplicación, el cual lo resolví usando solamente Context API. <br/> Mantener el botón de guardado sincronizado a lo largo de toda la aplicación fue un pequeño desafío, el cual puede resolver rápidamente.",
  "stack_icons": [
    { "name": "React", "icon": "../stack_icons/react.png" },
    { "name": "TypeScript", "icon": "../stack_icons/typescript.png" },
    { "name": "Material-UI", "icon": "../stack_icons/mui.png" },
    { "name": "Tailwind CSS", "icon": "../stack_icons/tailwind.png" },
    { "name": "React Router", "icon": "../stack_icons/react-router.png" },
    { "name": "Axios", "icon": "../stack_icons/axios.png" },
    { "name": "Firebase", "icon": "../stack_icons/firebase.png" },
    { "name": "Swiper.js", "icon": "../stack_icons/swiper.png" }
  ],
  "img": "backlogged.png",
  "links": [
    { "name": "Sitio", "link": "https://backlogged.netlify.app/" },
    { "name": "GitHub", "link": "https://github.com/Leo-Cata/rawg-app" }
  ]
}
