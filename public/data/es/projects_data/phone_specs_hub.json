{
  "title": "Phone Specs Hub",
  "objective": "Después haber finalizado mis 2 proyectos previos, los cuales se concentraban más en replicar un diseño a código, quería moverme a algo un poco más complicado, con más lógica de programación, trabajar con API y al mismo tiempo, fortalecer mis conocimientos con TypeScript. Aprender MUI y él use básico de Axios",

  "features": "En la página principal, los usuarios encontrarán los últimos celulares lanzados (lo cual la base de datos de la API actualiza automáticamente y se refleja en mi web app) o pueden navegar y ver todas las marcas disponibles, dicha página tiene una barra de búsqueda la cual filtra las marcas en el cliente. Para la página de cada celular, la información técnica se muestra en formato de acordeón. Modularidad fue uno de mis enfoques, varios de los componentes son reutilizados como es el caso de las cards o los links para los celulares 'top by interest' y 'top by fans' <br/>Como en todos mis proyectos, el diseño es fully responsive y testeado en dispositivos hasta 375px de ancho.",

  "challenges": "Encontré esta API de pura suerte en GitHub, provee mucha información, pero no está bien documentada y la función de buscar en la base de datos no funciona. Afortunadamente, en uno de los issues abiertos en el repositorio, otro usuario de GitHub creo su propia API de backend para realizar las búsquedas. Otra dificultad que tuve fue en entender la estructura de la información que esta API te da a la hora de hacer las llamadas a los endpoints y configurar los 'types'.<br/> A la hora de usar MUI, a pesar de que leí la documentación anteriormente, se me dificulto un poco lo que fue entender la manera de que esta librería hecha por Google funciona y la 'filosofía' de sus funcionalidades, su sistema de 'flexbox grid' y su sistema de estilización 'nativo', el cual en vez, utilicé TailwindCSS para la mayoría de los estilos, infectando MUI primero para que TailwindCSS tenga prioridad",

  "stack": "MUI es la librería principal para todos los componentes y estilos, con algunas modificaciones utilizando TailwindCSS, Axios se encarga de hacer los fetchs, React-Router-DOM para la navegación SPA, TypeScript mantiene el proyecto 'type safe' y React como el framework del frontend",

  "img": "psh.png",

  "links": [
    { "name": "Site", "link": "https://phonespecshub.netlify.app/" },
    { "name": "GitHub", "link": "https://github.com/Leo-Cata/phone-specs-hub" }
  ]
}
